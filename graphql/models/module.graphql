extend type Mutation {
    upsertModule(input: UpsertModuleInput @spread): Module! @upsert @can(ability:"upsert", injectArgs:"true")
    deleteModule(id: ID!): Module @delete
}

extend type Query {
    getModule(id: ID! @eq): Module! @find
}

input UpsertModuleInput {
    id: ID
    owner: ModuleBelongsToConsultantProfile

    title: String
    description: String
    is_public: Boolean
    content: String
    conditions: String

    programs: ModuleBelongsToManyPrograms
    templates: ModuleBelongsToManyTemplates
    reminder: ModuleHasOneReminder
    trigger: ModuleHasOneTrigger
    tags: ItemMorphsToManyTags
}

input ModuleBelongsToManyPrograms {
    connect: [ID!]
}

input ModuleBelongsToManyTemplates {
    connect: [ID!]
}

input ModuleBelongsToConsultantProfile {
    connect: ID!
}

input ModuleHasOneReminder {
    upsert: UpsertModuleReminderInput!
}

input ModuleHasOneTrigger {
    upsert: UpsertModuleTriggerInput!
}

type Module {
    id: ID!
    owner: User!

    title: String!
    description: String!
    is_public: Boolean!
    content: String
    conditions: String

    pivot: ModulePivot

    created_at: DateTime!
    updated_at: DateTime!
    deleted_at: DateTime!

    templates: [Template]
    programs: [Program]
    reminder: ModuleReminder
    trigger: ModuleTrigger
}

type ModulePivot {
    id: ID!
    folder: String
    order: String
}
