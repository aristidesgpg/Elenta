extend type Query {
    getTemplate(id: ID! @eq): Template! @find
    getTemplatesByOwner(consultant_profile_id: ID! @eq(key: "consultant_profile_id")): [Template!]! @all
}

extend type Mutation {
    upsertTemplate(input: UpsertTemplateInput! @spread): Template! @upsert @can(ability:"upsert", injectArgs:"true")
    updateTemplateModules(input: UpdateTemplateModulesInput @spread): Template! @update @can(ability: "update", find: "id")
    duplicateTemplateModules(input: DuplicateTemplateModulesInput @spread): Template! @can(ability: "update", find: "id") @field(resolver: "App\\GraphQL\\Resolvers\\DuplicateTemplateModulesResolver@resolve")
}

input UpsertTemplateInput {
    id: ID
    owner: ConsultantProfileBelongsTo

    title: String
    description: String
    can_request: Boolean
    is_public: Boolean
    dynamic_fields: String

    recipientLists: TemplateHasManyRecipientLists
    modules: TemplatesBelongsToManyModules
    tags: ItemMorphsToManyTags
}

input TemplateHasManyRecipientLists {
    upsert: [UpsertRecipientListInput]
}

input UpdateTemplateModulesInput {
    id: ID!
    templateModules: UpdateTemplateModulesHasMany
}

input DuplicateTemplateModulesInput {
    id: ID!
    type: String
    modules: [ID!]
}

input UpdateTemplateModulesHasMany {
    upsert: [ConnectTemplateModule!]
    delete: [ID!]
}

input TemplatesBelongsToManyModules {
    create: [UpsertModuleInput!]
    connect: [ConnectTemplateModule!]
    sync: [ConnectTemplateModule!]
}

input ConnectTemplateModule {
    id: ID!
    folder: String
    order: Int
    recipient_list_id: ID
}

type Template {
    id: ID!
    owner: ConsultantProfile!

    title: String!
    description: String
    can_request: Boolean!
    is_public: Boolean!
    dynamic_fields: String

    created_at: DateTime!
    updated_at: DateTime!
    deleted_at: DateTime!

    pivot: ModulePivot

    recipientLists: [RecipientList]
    templateModules: [TemplateModule] @softDeletes
    modules: [Module]
    requests: [TemplateRequest]
    programs: [Program]
    tags: [Tag]
}


type TemplateModule {
    id: ID!
    module: Module

    folder: String
    order: Int!

    module_variables: String
    recipientList: RecipientList

    created_at: DateTime!
    updated_at: DateTime!
    deleted_at: DateTime!
}
