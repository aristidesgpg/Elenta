extend type Query {
    getTemplate(id: ID! @eq): Template! @find
    getTemplatesByOwner(consultant_profile_id: ID! @eq(key: "consultant_profile_id")): [Template!]! @all
}

extend type Mutation {
    createTemplate(input: CreateTemplateInput! @spread): Template! @create
    updateTemplate(input: UpdateTemplateInput! @spread): Template! @update
}

input CreateTemplateInput {
    owner: CreateConsultantProfileBelongsTo!

    title: String!
    can_request: Boolean!
    is_public: Boolean!
    dynamic_fields: String

    modules: CreateModulesBelongsToMany
}

input CreateModulesBelongsToManyTemplates {
    connect: [ConnectTemplateModule!]
}

input UpdateTemplateInput {
    id: ID!
    title: String
    can_request: Boolean
    is_public: Boolean
    dynamic_fields: String

    modules: UpdateModulesBelongsToMany
}

input UpdateModulesBelongsToManyTemplates {
    sync: [ConnectTemplateModule!]
}

input ConnectTemplateModule {
    id: ID!
    folder: String
    order: Int
}

type Template {
    id: ID!
    owner: ConsultantProfile!

    title: String!
    can_request: Boolean!
    is_public: Boolean!
    dynamic_fields: String

    created_at: DateTime!
    updated_at: DateTime!
    deleted_at: DateTime!

    templateModules: [TemplateModule]
    modules: [Module]
    requests: [TemplateRequest]
    programs: [Program]
}

type TemplateModule {
    id: ID!
    module: Module

    folder: String
    order: Int!

    created_at: DateTime!
    updated_at: DateTime!
    deleted_at: DateTime!
}
