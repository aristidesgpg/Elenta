extend type Query {
    getLearnerProfile(user_id: ID! @eq): LearnerProfile! @find
}

extend type Mutation {
    createLearnerProfile(input: CreateLearnerProfileInput @spread): LearnerProfile! @create
    updateLearnerProfile(input: UpdateLearnerProfileInput @spread): LearnerProfile! @updateLearnerProfile @field(resolver: "App\\GraphQL\\Resolvers\\UpdateLearnerProfileResolver@resolve")
}

input CreateLearnerProfileInput {
    picture_url: String!
    role: String
    tenure: String
    user: CreateLearnerProfileBelongsTo!
}

input CreateLearnerProfileBelongsTo {
    connect: ID!
}

input UpdateLearnerProfileInput {
    id: ID!
    user_id: ID!
    picture_url: String
    role: String
    tenure: String

    name: String
    email: String @rules(apply: ["email"])

    old_password: String
    password: String
    password_confirmation: String
}

type LearnerProfile {
    id: ID!
    user: User

    picture_url: String
    role: String
    tenure: String

    created_at: DateTime!
    updated_at: DateTime!
    deleted_at: DateTime!

    programs: [Program] #@viewPolicyFilter
    programModules: [ProgramModule] @viewPolicyFilter
    programInvites: [ProgramInvite] #@viewPolicyFilter
}
