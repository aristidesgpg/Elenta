extend type Query {
    getProgramModuleSend(id: ID! @eq): ProgramModuleSend! @find
}

extend type Mutation {
    updateProgramModuleSend(input: UpdateProgramModuleSendInput! @spread): ProgramModuleSend! @update @can(ability: "update", find: "id")
    createProgramModuleSends(input: CreateProgramModuleSendsInput! @spread): [ProgramModuleSend]! @can(ability: "create", injectArgs: "true") @field(resolver: "App\\GraphQL\\Resolvers\\CreateProgramModuleSendsResolver@resolve")
}

type ProgramModuleSend {
    id: ID!
    programModule: ProgramModule
    learner: LearnerProfile
    recipientList: RecipientList

    reason: String
    channel: String
    subject: String
    message: String

    send_timestamp: DateTime
    open_timestamp: DateTime
    click_timestamp: DateTime
    response_timestamp: DateTime

    response_feedback: String
    response_rating: Int
    response_data: String

    created_at: DateTime!
    updated_at: DateTime!
    deleted_at: DateTime!
}

input UpdateProgramModuleSendInput {
    id: ID!

    response_feedback: String
    response_rating: Int
    response_data: String
}

input CreateProgramModuleSendsInput {
    program_module_id: ID!
}
