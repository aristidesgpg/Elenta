extend type Query @middleware(checks: ["auth:sanctum"]) {
    getProgram(id: ID! @eq): Program! @find
}

extend type Mutation @middleware(checks: ["auth:sanctum"]) {
    upsertProgram(input: UpsertProgramInput! @spread): Program! @upsert @can(ability: "update", find: "id")
    updateProgramModules(input: UpdateProgramModulesInput @spread): Program! @update @can(ability: "update", find: "id")
}

enum ProgramFormat {
    SELF_DIRECTED
    IN_PERSON
    VIRTUAL_ATTENDANCE
}

input UpdateProgramModulesInput {
    id: ID!
    templateModules: UpdateProgramModulesHasMany
}

input UpdateProgramModulesHasMany {
    upsert: [ConnectProgramModule!]
    delete: [ID!]
}

type Program {
    id: ID!
    owner: ConsultantProfile!
    template: Template!

    title: String!
    format: ProgramFormat!
    max_learners: Int
    start_timestamp: DateTime
    can_invite: Boolean
    is_public: Boolean
    dynamic_fields: String
    dynamic_fields_data: String

    pivot: ModulePivot

    created_at: DateTime!
    updated_at: DateTime!
    deleted_at: DateTime!

    programModules: [ProgramModule] @hasMany @softDeletes
    modules: [Module] @belongsToMany
    learners: [LearnerProfile]
    invites: [ProgramInvite]
}

input UpsertProgramInput {
    id: ID
    owner: ConsultantProfileBelongsToTemplate
    template: ProgramBelongsToTemplate

    title: String
    format: ProgramFormat
    max_learners: Int
    start_timestamp: DateTime
    can_invite: Boolean
    is_public: Boolean
    dynamic_fields: String
    dynamic_fields_data: String

    programModules: ModulesBelongsToManyPrograms
}

input ProgramBelongsToTemplate {
    connect: ID!
}

input ConsultantProfileBelongsToTemplate {
    connect: ID!
}

input ModulesBelongsToManyPrograms {
    connect: [ConnectProgramModule!]
    sync: [ConnectProgramModule!]
}

input ConnectProgramModule {
    id: ID!
    folder: String
    order: Int
}

type ProgramModule {
    id: ID!
    program: Program
    module: Module

    folder: String
    order: Int

    created_at: DateTime!
    updated_at: DateTime!
    deleted_at: DateTime!

    reminders: [ModuleReminder]
    triggers: [ModuleTrigger]
    send: ProgramModuleSend
}

